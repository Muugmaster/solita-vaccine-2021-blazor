@inject IOrderService orderService

@if (OrdersBeforeDate.Count == 0)
{
<div class="spinner-border" role="status">
    <span class="sr-only">Loading...</span>
</div>
}
else
{
<div class="card">
    <div class="card-body">
        <h5 class="card-title">Orders and vaccines arrived</h5>
        <h6 class="card-subtitle mb-2 text-muted">
            <select @bind="VaccineName">
                @foreach (var value in Enum.GetValues(typeof(VaccineNames)))
                    {
                    <option>@value</option>
                    }
            </select>
        </h6>
        <div class="row">
            <div class="col-sm">
                <h4>Before date:</h4>
                <ul class="list-group text-left">
                    <li class="list-group-item">
                        <div class="font-weight-bold">Total vaccines</div>
                        @orderService.CountVaccinesFromOrders(OrdersBeforeDate)
                    </li>
                    <li class="list-group-item">
                        <div class="font-weight-bold">Total orders</div>
                        @OrdersBeforeDate.Count
                    </li>
                </ul>
            </div>
            <div class="col-sm">
                <h4>Selected date:</h4>
                <ul class="list-group text-left">
                    <li class="list-group-item">
                        <div class="font-weight-bold">Total vaccines</div>
                        @orderService.CountVaccinesFromOrders(OrdersOnDate)
                    </li>
                    <li class="list-group-item">
                        <div class="font-weight-bold">Total orders</div>
                        @OrdersOnDate.Count
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
}

@code {
    [Parameter]
    public List<Order> OrdersBeforeDate { get; set; }
    [Parameter]
    public List<Order> OrdersOnDate { get; set; }
    [Parameter]
    public DateTime date { get; set; }

    protected override void OnParametersSet()
    {
        vaccineName = VaccineNames.Total.ToString();
        HandleChange();
    }

    private string vaccineName = VaccineNames.Total.ToString();
    public string VaccineName { get
        {
            return vaccineName;
        } set
        {
            vaccineName = value.ToString();
            HandleChange();

        }
    }

    enum VaccineNames
    {
        Total,
        Zerpfy,
        SolarBuddhica,
        Antiqua
    }

    private async void HandleChange()
    {
        if (vaccineName != VaccineNames.Total.ToString())
        {
            OrdersBeforeDate = await orderService.GetOrdersBeforeDateWithVaccineName(date.ToString("s"), vaccineName);
            OrdersOnDate = await orderService.GetOrdersOnDateWithVaccineName(date.ToString("s"), vaccineName);
            StateHasChanged();
        } else
        {
            OrdersBeforeDate = await orderService.GetOrdersBeforeDate(date.ToString("s"));
            OrdersOnDate = await orderService.GetOrdersOnDate(date.ToString("s"));
            StateHasChanged();
        }
    }
}

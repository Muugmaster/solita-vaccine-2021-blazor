@page "/orders"
@inject IOrderService OrderService

<h3>Orders</h3>
@if (AllOrders.Count == 0)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{           
<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Order number</th>
                <th scope="col">Responsible person</th>
                <th scope="col">Healthcare district</th>
                <th scope="col">Vaccine</th>
                <th scope="col">Injections</th>
                <th scope="col">Arrived</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in AllOrders)
            {
                <tr>
                    <td>@order.OrderNumber</td>
                    <td>@order.ResponsiblePerson</td>
                    <td>@order.HealthCareDistrict</td>
                    <td>@order.Vaccine</td>
                    <td>@order.Injections</td>
                    <td>@order.Arrived</td>
                </tr>
                @if (order.Vaccinations.Count != 0)
                    {
                <tr>
                    <td colspan="2"></td>
                    <td colspan="2">All vaccinations made from Order: @order.OrderNumber</td>
                    <td class="font-weight-bold">SourceBottle</td>
                    <td class="font-weight-bold">Gender</td>
                </tr>
                    }
                @foreach (var vaccination in order.Vaccinations)
                    {
                <tr>
                    <td colspan="4"></td>
                    <td>@vaccination.SourceBottle</td>
                    <td>@vaccination.Gender</td>
                </tr>
                    }
}
        </tbody>
    </table>
</div>
}

@code {
    public List<Order> AllOrders { get; set; } = new List<Order>();

    protected override async Task OnInitializedAsync()
    {
        AllOrders = await OrderService.GetOrders();
    }
}
